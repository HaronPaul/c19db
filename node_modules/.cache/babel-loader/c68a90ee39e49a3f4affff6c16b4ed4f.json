{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react'; //Pagination tutorial source: https://www.freecodecamp.org/news/build-a-custom-pagination-component-in-react/\n\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, idx) => idx + start);\n};\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) => {\n  _s();\n\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n    const totalPageNumbers = siblingCount + 5;\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n  return paginationRange;\n};\n\n_s(usePagination, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"sources":["/Users/admin/Desktop/shit/c19db/src/components/news/usePagination.jsx"],"names":["React","useMemo","DOTS","range","start","end","length","Array","from","_","idx","usePagination","totalCount","pageSize","siblingCount","currentPage","paginationRange","totalPageCount","Math","ceil","totalPageNumbers","leftSiblingIndex","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,OAAf,QAA6B,OAA7B,C,CAGA;;AACA,OAAO,MAAMC,IAAI,GAAG,KAAb;;AAEP,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC5B,MAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAN,GAAc,CAA3B;AACA,SAAOG,KAAK,CAACC,IAAN,CAAW;AAAEF,IAAAA;AAAF,GAAX,EAAuB,CAACG,CAAD,EAAIC,GAAJ,KAAYA,GAAG,GAAGN,KAAzC,CAAP;AACD,CAHD;;AAMA,OAAO,MAAMO,aAAa,GAAG,CAAC;AAC1BC,EAAAA,UAD0B;AAE1BC,EAAAA,QAF0B;AAG1BC,EAAAA,YAAY,GAAG,CAHW;AAI1BC,EAAAA;AAJ0B,CAAD,KAKvB;AAAA;;AACE,QAAMC,eAAe,GAAGf,OAAO,CAAC,MAAM;AAEtC,UAAMgB,cAAc,GAAGC,IAAI,CAACC,IAAL,CAAUP,UAAU,GAAGC,QAAvB,CAAvB;AACA,UAAMO,gBAAgB,GAAGN,YAAY,GAAG,CAAxC;;AAGA,QAAIM,gBAAgB,IAAIH,cAAxB,EAAwC;AACpC,aAAOd,KAAK,CAAC,CAAD,EAAIc,cAAJ,CAAZ;AACH;;AAED,UAAMI,gBAAgB,GAAGH,IAAI,CAACI,GAAL,CAASP,WAAW,GAAGD,YAAvB,EAAqC,CAArC,CAAzB;AACA,UAAMS,iBAAiB,GAAGL,IAAI,CAACM,GAAL,CACxBT,WAAW,GAAGD,YADU,EAExBG,cAFwB,CAA1B;AAKA,UAAMQ,kBAAkB,GAAGJ,gBAAgB,GAAG,CAA9C;AACA,UAAMK,mBAAmB,GAAGH,iBAAiB,GAAGN,cAAc,GAAG,CAAjE;AAEA,UAAMU,cAAc,GAAG,CAAvB;AACA,UAAMC,aAAa,GAAGX,cAAtB;;AAEA,QAAI,CAACQ,kBAAD,IAAuBC,mBAA3B,EAAgD;AAC5C,UAAIG,aAAa,GAAG,IAAI,IAAIf,YAA5B;AACA,UAAIgB,SAAS,GAAG3B,KAAK,CAAC,CAAD,EAAI0B,aAAJ,CAArB;AAEA,aAAO,CAAC,GAAGC,SAAJ,EAAe5B,IAAf,EAAqBe,cAArB,CAAP;AACH;;AAED,QAAIQ,kBAAkB,IAAI,CAACC,mBAA3B,EAAgD;AAE5C,UAAIK,cAAc,GAAG,IAAI,IAAIjB,YAA7B;AACA,UAAIkB,UAAU,GAAG7B,KAAK,CACpBc,cAAc,GAAGc,cAAjB,GAAkC,CADd,EAEpBd,cAFoB,CAAtB;AAKA,aAAO,CAACU,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG8B,UAA1B,CAAP;AACH;;AAED,QAAIP,kBAAkB,IAAIC,mBAA1B,EAA+C;AAC7C,UAAIO,WAAW,GAAG9B,KAAK,CAACkB,gBAAD,EAAmBE,iBAAnB,CAAvB;AACA,aAAO,CAACI,cAAD,EAAiBzB,IAAjB,EAAuB,GAAG+B,WAA1B,EAAuC/B,IAAvC,EAA6C0B,aAA7C,CAAP;AACD;AAEJ,GA7CkC,EA6ChC,CAAChB,UAAD,EAAaC,QAAb,EAAuBC,YAAvB,EAAqCC,WAArC,CA7CgC,CAA/B;AA+CJ,SAAOC,eAAP;AACH,CAtDM;;GAAML,a","sourcesContent":["import React, {useMemo} from 'react'\r\n\r\n\r\n//Pagination tutorial source: https://www.freecodecamp.org/news/build-a-custom-pagination-component-in-react/\r\nexport const DOTS = '...';\r\n\r\nconst range = (start, end) => {\r\n  let length = end - start + 1;\r\n  return Array.from({ length }, (_, idx) => idx + start);\r\n};\r\n\r\n\r\nexport const usePagination = ({\r\n    totalCount,\r\n    pageSize,\r\n    siblingCount = 1,\r\n    currentPage\r\n}) => {\r\n        const paginationRange = useMemo(() => {\r\n\r\n        const totalPageCount = Math.ceil(totalCount / pageSize)\r\n        const totalPageNumbers = siblingCount + 5\r\n\r\n\r\n        if (totalPageNumbers >= totalPageCount) {\r\n            return range(1, totalPageCount);\r\n        }\r\n\r\n        const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\r\n        const rightSiblingIndex = Math.min(\r\n          currentPage + siblingCount,\r\n          totalPageCount\r\n        );\r\n\r\n        const shouldShowLeftDots = leftSiblingIndex > 2;\r\n        const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\r\n\r\n        const firstPageIndex = 1;\r\n        const lastPageIndex = totalPageCount;\r\n\r\n        if (!shouldShowLeftDots && shouldShowRightDots) {\r\n            let leftItemCount = 3 + 2 * siblingCount;\r\n            let leftRange = range(1, leftItemCount);\r\n      \r\n            return [...leftRange, DOTS, totalPageCount];\r\n        }\r\n\r\n        if (shouldShowLeftDots && !shouldShowRightDots) {\r\n\r\n            let rightItemCount = 3 + 2 * siblingCount;\r\n            let rightRange = range(\r\n              totalPageCount - rightItemCount + 1,\r\n              totalPageCount\r\n            );\r\n\r\n            return [firstPageIndex, DOTS, ...rightRange];\r\n        }\r\n\r\n        if (shouldShowLeftDots && shouldShowRightDots) {\r\n          let middleRange = range(leftSiblingIndex, rightSiblingIndex);\r\n          return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\r\n        }\r\n\r\n    }, [totalCount, pageSize, siblingCount, currentPage])\r\n\r\n    return paginationRange\r\n}\r\n"]},"metadata":{},"sourceType":"module"}